- fiscal_year_prev = fiscal_year_prev(@response)
- fiscal_year = fiscal_year(@response)

:javascript
  var _response_id = "#{@response.id}";
  var _activity_id = "#{@activity.id}";
  var _funding_sources = #{get_funding_sources(current_user.organization.projects)}
  var _budget = #{@response.data_request.budget.to_json};
  var _spend = #{@response.data_request.spend.to_json};

- f.inputs :class => 'inputs' do
  %li.last
    %h3 Basics
    %ul.dashboard_section
      = f.input :project_id, :label => "Project", :as => :select, :collection => current_user.current_data_response ? current_user.current_data_response.projects : [@activity.try(:project).try(:data_response).try(:projects)].flatten, :hint => "The Project this activity correlates to"

      #project_sub_form
        #project_sub_form_fields
          - if @activity.project
            = render 'project_sub_form', {:activity => @activity, :project => @activity.project}

      = f.input :name, :required => false, :hint => "The name of this Activity."
      = f.input :description, :input_html => { :rows => 2 }, :required => false, :hint => "A description of this Activity."
      = f.input :start_date, :as => :string, :label => "Start date", :input_html => {:class => 'date_picker'}, :hint => "(YYYY-MM-DD) When the Project (and it's related Activities) started.", :required => false
      = f.input :end_date, :as => :string, :label => "End date", :input_html => {:class => 'date_picker'}, :hint => "(YYYY-MM-DD) The end date for the Projectâ€™s implementation.", :required => false


  - if @response.data_request.spend?
    %li.last
      %h3== Past Activity Expenditure (#{@response.currency})
      %ul.dashboard_section
        = f.input :spend, :label => "Spent", :hint => "The total amount that you have spent in the past fiscal year. You can enter the total amount here OR below in the quarterly fields", :required => false
        %li.amounts.last
          %label== Quarterly spend
          %ul
            = f.input :spend_q4_prev, :label => "Q4 #{fiscal_year_prev}", :required => false
            = f.input :spend_q1     , :label => "Q1 #{fiscal_year}", :required => false
            = f.input :spend_q2     , :label => "Q2 #{fiscal_year}", :required => false
            = f.input :spend_q3     , :label => "Q3 #{fiscal_year}", :required => false
            = f.input :spend_q4     , :label => "Q4 #{fiscal_year}", :required => false

  - if @response.data_request.budget?
    %li.last
      %h3 Budget (planned expenditure) (#{@response.currency})
      %ul.dashboard_section
        = f.input :budget, :label => "Budget", :hint => "The total amount that you are planning to spend in the upcoming fiscal year. You can enter the total amount here OR below in the quarterly fields", :required => false
        - if @response.request.budget_by_quarter?
          %li.amounts.last
            %label== Quarterly budget
            %ul
              = f.input :budget_q4_prev, :label => "Q4 #{fiscal_year_prev}", :required => false
              = f.input :budget_q1     , :label => "Q1 #{fiscal_year}", :required => false
              = f.input :budget_q2     , :label => "Q2 #{fiscal_year}", :required => false
              = f.input :budget_q3     , :label => "Q3 #{fiscal_year}", :required => false
              = f.input :budget_q4     , :label => "Q4 #{fiscal_year}", :required => false
        - unless @response.request.no_long_term_budgets?
          %li.amounts
            %label Long-term
            %ul
              = f.input :budget2, :label => "Year + 2", :required => false if @response.request.year_2?
              = f.input :budget3, :label => "Year + 3", :required => false if @response.request.year_3?
              = f.input :budget4, :label => "Year + 4", :required => false if @response.request.year_4?
              = f.input :budget5, :label => "Year + 5", :required => false if @response.request.year_5?

  %li.last
    %h3 Activity Funding Sources
    %ul.dashboard_section
      .funding_sources
        - f.semantic_fields_for :funding_sources do |fs|
          = render "activities/funding_source_fields", :f => fs
        .add
          = link_to_add_fields "Add funding source", f, :funding_sources, "activities/"
          %p.hint The sources from which your organization receives funding for this Activity.
        

  %li.last
    %h3== Implementers
    %ul.dashboard_section
      %p.hint Service Providers and partners you work with
      - hint = "Service Providers who implement Activities for your organization's Projects/Activities. E.g. a NGO, a Health Facility Institution, Government office, or a District."
      - hint = hint + "<br>NOTE: You uploaded \"#{@activity.text_for_provider}\"" if !@activity.text_for_provider.blank? && @activity.provider.nil?
      .implementer_container
        =# f.input :provider, :label => "Implementer", :as => :select, :hint => hint, :required => false, :input_html => {:class => 'combobox'}
        = select_tag :provider
      = render :partial => 'shared/add_organizations'
      
  %li.last.sub_activities
    %h3 Sub Activities
    %p.hint Optional. Used if you fund a large number of different partners (for example, 20 health centers in a number of locations), that implement identical or very similar Activities.
    - f.semantic_fields_for :sub_activities do |ca|
      = render "activities/sub_activity_fields", :f => ca
    .add
      = link_to_add_fields "Add Sub Activity", f, :sub_activities, "activities/"

  %li.last
    %h3== Other
    %ul.dashboard_section
      = f.input :beneficiaries, :as => :check_boxes, :label => "Beneficiary details / Other beneficiaries", :hint => "Beneficiaries of your Activity, if applicable to any of these population groups."
      = f.input :text_for_beneficiaries, :input_html => { :rows => 2 }, :label => "Other beneficiaries", :as => :text, :required => false, :hint => "Beneficiaries of your Activity that are not listed above."
      = f.input :text_for_targets, :input_html => { :rows => 2 }, :label => "Targets", :as => :text, :required => false, :hint => "The goals of this Activity."

  %li
    %ul.horizontal
      - f.buttons :class => 'buttons' do
        = f.commit_button "Save", :class => "last"
        - if @response.data_request.spend? || @response.data_request.budget?
          = f.commit_button "Save & Classify >", :class => "last"

- unless @activity.new_record?
  .delete_section
    = link_to "Delete this Activity", response_activity_path(@response, @activity), :confirm => "Are you sure you want to delete this Activity?", :method => :delete, :class => "delete_btn", :class => 'delete_action'
    %p
      %strong Warning:
      Once you delete an Activity, you will lose all data associated with it, and there is no undo.

:javascript
  (function( $ ) {
  		$.widget( "ui.combobox", {
  			_create: function() {
  				var self = this,
  					select = this.element.hide(),
  					selected = select.children( ":selected" ),
  					value = selected.val() ? selected.text() : "";
  				var input = this.input = $( "<input>" )
  					.insertAfter( select )
  					.val( value )
  					.autocomplete({
  						delay: 0,
  						minLength: 0,
  						source: function( request, response ) {
  							var matcher = new RegExp( $.ui.autocomplete.escapeRegex(request.term), "i" );
  							response( select.children( "option" ).map(function() {
  								var text = $( this ).text();
  								if ( this.value && ( !request.term || matcher.test(text) ) )
  									return {
  										label: text.replace(
  											new RegExp(
  												"(?![^&;]+;)(?!<[^<>]*)(" +
  												$.ui.autocomplete.escapeRegex(request.term) +
  												")(?![^<>]*>)(?![^&;]+;)", "gi"
  											), "<strong>$1</strong>" ),
  										value: text,
  										option: this
  									};
  							}) );
  						},
  						select: function( event, ui ) {
  							ui.item.option.selected = true;
  							self._trigger( "selected", event, {
  								item: ui.item.option
  							});
  						},
  						change: function( event, ui ) {
  							if ( !ui.item ) {
  								var matcher = new RegExp( "^" + $.ui.autocomplete.escapeRegex( $(this).val() ) + "$", "i" ),
  									valid = false;
  								select.children( "option" ).each(function() {
  									if ( $( this ).text().match( matcher ) ) {
  										this.selected = valid = true;
  										return false;
  									}
  								});
  								if ( !valid ) {
  									// remove invalid value, as it didn't match anything
  									$( this ).val( "" );
  									select.val( "" );
  									input.data( "autocomplete" ).term = "";
  									return false;
  								}
  							}
  						}
  					})
  					.addClass( "ui-widget ui-widget-content ui-corner-left" );

  				input.data( "autocomplete" )._renderItem = function( ul, item ) {
  					return $( "<li></li>" )
  						.data( "item.autocomplete", item )
  						.append( "<a>" + item.label + "</a>" )
  						.appendTo( ul );
  				};

  				this.button = $( "<button type='button'>&nbsp;</button>" )
  					.attr( "tabIndex", -1 )
  					.attr( "title", "Show All Items" )
  					.insertAfter( input )
  					.button({
  						icons: {
  							primary: "ui-icon-triangle-1-s"
  						},
  						text: false
  					})
  					.removeClass( "ui-corner-all" )
  					.addClass( "ui-corner-right ui-button-icon" )
  					.click(function() {
  						// close if already visible
  						if ( input.autocomplete( "widget" ).is( ":visible" ) ) {
  							input.autocomplete( "close" );
  							return;
  						}

  						// work around a bug (likely same cause as #5265)
  						$( this ).blur();

  						// pass empty string as value to search for, displaying all results
  						input.autocomplete( "search", "" );
  						input.focus();
  					});
  			},

  			destroy: function() {
  				this.input.remove();
  				this.button.remove();
  				this.element.show();
  				$.Widget.prototype.destroy.call( this );
  			}
  		});
  	})( jQuery );

  	$(function() {
  		$( "#provider" ).combobox();
  	});